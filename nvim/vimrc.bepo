" {W} -> [É]
" ——————————
" On remappe W sur É :
map é w
map É W
cmap é w

" {tsrn} pour se déplacer
" ————————————————
" {tn} = « gauche / droite »
noremap t h
noremap n l
" {sr} = « haut / bas »
noremap s j
noremap r k
" {TN} = « haut / bas de l'écran »
noremap T H
noremap N L

" on remap les commandes {tsrn} originelles sur <Leader>{tsrn}
" ————————————————
" till
noremap <Leader>t t
" substitute
noremap <Leader>s s
" replace
noremap <Leader>r r
noremap <Leader>R R
" next est géré par 'l' et 'L' (n nous sert pour netrw)
noremap l n
noremap L N

" <> en direct
" ————————————
noremap « <
noremap » >

" netrw set up mappings that are local to the buffer (using the <buffer> option)
augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
    noremap <buffer> t h
    noremap <buffer> n l
    " {sr} = « haut / bas »
    noremap <buffer> s j
    noremap <buffer> r k
    noremap <buffer> h t
    noremap <buffer> j s
    noremap <buffer> k r
    noremap <buffer> l n
endfunction

" NERDTree
" ————————
let g:NERDTreeMapChdir = 'H'
let g:NERDTreeMapChdir = 'hd'
let g:NERDTreeMapCWD = 'HD'
let g:NERDTreeMapOpenInTab = 'j'
let g:NERDTreeMapJumpLastChild = 'J'
let g:NERDTreeMapOpenVSplit = 'k'
let g:NERDTreeMapRefresh = 'l'
let g:NERDTreeMapRefreshRoot = 'L'
