#################
# ZSH customize #
#################
ZSH_THEME="agnoster"
CASE_SENSITIVE="true"
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
DISABLE_AUTO_TITLE="true"

# Repo must be cloned in .oh-my-zsh/plugins if it is not done by default
plugins=( git docker kubectl kitchen colored-man-pages fzf zsh-syntax-highlighting )
source $ZSH/oh-my-zsh.sh
source $ZSH/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


#################
# Load binaries #
#################
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # NVM
eval "$(pyenv init -)" # Pyenv
pyenv virtualenvwrapper # Virtualenv Wrapper
source "/opt/homebrew/bin/virtualenvwrapper.sh" # if virtualenv installed with /opt/homebrew/bin/python3


##################
# Autocompletion #
##################
# Enable bash completion
# Load bash completion functions
autoload -Uz +X compinit && compinit
autoload -Uz +X bashcompinit && bashcompinit
# In install.sh: mkdir ~/.oh-my-zsh/completions -> to store completion scripts
eval "$(chef shell-init zsh)" # Chef
source "$HOME/src/google-cloud-sdk/completion.bash.inc"


##########
# Prompt #
##########
# Update PS1 in case zshrc is sourced inside a virtualenv
#  (without this the PS1 updated by virtualenvwrapper would be reset)
if [[ -n "$VIRTUAL_ENV" ]]; then
    PS1="%F{red}VENV ($(basename $VIRTUAL_ENV))%F{reset} $_OLD_VIRTUAL_PS1"
fi
export PS1

# Do not show prompt context (username@host)
prompt_context() { }


###########
# Vi-mode #
###########
function zle-line-init zle-keymap-select {
    case $KEYMAP in
        vicmd) RPS1="%F{blue}--NORMAL--"; echo -e -n "\x1b[\x30 q";;
        viins|main) RPS1="%F{yellow}--INSERT--"; echo -e -n "\x1b[\x35 q";;
    esac
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select


########
# BEPO #
########
# See zshzle man page for bindkey insights
# zle mole vim
bindkey -v
# Bepo mappings
bindkey -a t vi-backward-char
bindkey -a n vi-forward-char
bindkey -a l vi-repeat-search
bindkey -a L vi-rev-repeat-search
bindkey -a s vi-down-line-or-history
bindkey -a r vi-up-line-or-history
bindkey -a $ vi-end-of-line
bindkey -a 0 vi-digit-or-beginning-of-line
bindkey -a dd vi-change-whole-line
bindkey -a Ã© vi-forward-blank-word
bindkey dv vi-cmd-mode
bindkey -M menuselect t vi-backward-char
bindkey -M menuselect s vi-down-line-or-history
bindkey -M menuselect r vi-up-line-or-history
bindkey -M menuselect n vi-forward-char



###############################
# Virtualenv Wrapper Autoload #
###############################
# Load virtual envs created with virtualenvwrapper upon entering specific directories
# ONLY WORKS IF DIRECTORY AND VENV SHARE THE SAME NAME
cd() {
    builtin cd "$@"

    current_dir=$(basename $(pwd))
    # If I am leaving a venv
    if [[ -n "$VIRTUAL_ENV" ]] && ! [[ "$(pwd)" =~ "$(basename $VIRTUAL_ENV)"/* ]]; then
      deactivate
    fi
    # If no venv is activated
    if [[ -z "$VIRTUAL_ENV" ]]; then
      # Enable venv if the current directory is in the 'lsvirtualenv' list
      for dir in $(lsvirtualenv -b); do
        if [[ "${dir}" == "${current_dir}" ]]; then
            workon .
        fi
      done
    fi
}


###########
# Aliases #
###########
source ~/.aliases

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
