#################
# ZSH customize #
#################
CASE_SENSITIVE="true"
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
DISABLE_AUTO_TITLE="true"

# Repo must be cloned in .oh-my-zsh/plugins if it is not done by default
plugins=( gcloud git gpg-agent docker kubectl kitchen colored-man-pages fzf ssh-agent zsh-syntax-highlighting )
source $ZSH/oh-my-zsh.sh
source $ZSH/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


#################
# Load binaries #
#################
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # NVM
eval "$(pyenv init -)" # Pyenv
source "$(python3 -m site --user-base)/bin/virtualenvwrapper.sh"


##################
# Autocompletion #
##################
# Enable bash completion
# Load bash completion functions
autoload -Uz +X compinit && compinit
autoload -Uz +X bashcompinit && bashcompinit
# In install.sh: mkdir ~/.oh-my-zsh/completions -> to store completion scripts
# Change cursor shape with vi modes
function zle-line-init zle-keymap-select {
    case $KEYMAP in
        vicmd) echo -e -n "\x1b[\x30 q";;
        viins|main) echo -e -n "\x1b[\x35 q";;
    esac
}
zle -N zle-line-init
zle -N zle-keymap-select


########
# BEPO #
########
# See zshzle man page for bindkey insights
# zle mole vim
bindkey -v
# Bepo mappings
bindkey -a t vi-backward-char
bindkey -a n vi-forward-char
bindkey -a l vi-repeat-search
bindkey -a L vi-rev-repeat-search
bindkey -a s vi-down-line-or-history
bindkey -a r vi-up-line-or-history
bindkey -a $ vi-end-of-line
bindkey -a 0 vi-digit-or-beginning-of-line
bindkey -a dd vi-change-whole-line
bindkey -a Ã© vi-forward-blank-word
bindkey dv vi-cmd-mode
bindkey -M menuselect t vi-backward-char
bindkey -M menuselect s vi-down-line-or-history
bindkey -M menuselect r vi-up-line-or-history
bindkey -M menuselect n vi-forward-char


##########################
# Virtualenv autotrigger #
##########################

_manage_venv_on_cd() {
    local current_dir=$(basename $(pwd))

    # Deactivate if leaving a venv
    # Check if VIRTUAL_ENV is set AND the current directory is NOT within the venv's path
    if [[ -n "$VIRTUAL_ENV" ]] && ! [[ "$(pwd)" =~ "$(basename $VIRTUAL_ENV)"/* ]]; then
      echo "Deactivating virtual environment: $(basename $VIRTUAL_ENV)"
      deactivate
    fi

    # Activate if entering a venv (only if no venv is currently active)
    if [[ -z "$VIRTUAL_ENV" ]]; then
      # Check if the current directory name matches a virtualenv name
      for dir_name in $(lsvirtualenv -b); do
        if [[ "${dir_name}" == "${current_dir}" ]]; then
            echo "Activating virtual environment...: ${dir_name}"
            workon "${dir_name}" # `workon` activates the venv and sets VIRTUAL_ENV
            break # Found and activated, no need to check others
        fi
      done
    fi
}
chpwd_functions+=( _manage_venv_on_cd )


###########
# Aliases #
###########
source ~/.aliases

# Batch-like word split for for-loops
setopt shwordsplit

# Keep Starship at the end
eval "$(starship init zsh)"
 _manage_venv_on_cd # load venv when starting shell
